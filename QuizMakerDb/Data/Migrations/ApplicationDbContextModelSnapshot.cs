// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizMakerDb.Data;

#nullable disable

namespace QuizMakerDb.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("IdentityRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
<<<<<<< Updated upstream
                            Id = new Guid("3a193220-b5eb-46bc-bd84-c756583c6887"),
=======
                            Id = new Guid("fb7dc09f-201e-45a9-b387-b8d4c0ea8407"),
>>>>>>> Stashed changes
=======
                            Id = new Guid("5617a662-7420-44ab-9ff3-76bfa67b2c52"),
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
<<<<<<< HEAD
<<<<<<< Updated upstream
                            Id = new Guid("f4bf64a4-5b11-4099-8639-cd905362b963"),
=======
                            Id = new Guid("d2d0e4de-17dc-49e4-b9ee-846784652a54"),
>>>>>>> Stashed changes
=======
                            Id = new Guid("5cde413c-fc3c-4cd5-8d97-5fee8ca28e0d"),
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
<<<<<<< HEAD
<<<<<<< Updated upstream
                            Id = new Guid("6b0a0eb3-8514-43ff-9c2b-4b1b5b77c231"),
=======
                            Id = new Guid("9858076e-2e32-43ad-83f5-b4a692176296"),
>>>>>>> Stashed changes
=======
                            Id = new Guid("c1623f62-f123-4e06-841e-87449daa44f6"),
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityRoleClaims", (string)null);
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("IdentityUsers", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
<<<<<<< Updated upstream
                            Id = new Guid("80869283-ea00-44c1-8cad-ef41850851b7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e05028d6-d1d0-486b-bcd9-99c40f8ed796",
=======
                            Id = new Guid("391affc7-508b-4bf4-b1e5-284aba2a0a34"),
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "c8685a8b-fb2c-4f1f-a4a2-57b485c1ed54",
>>>>>>> Stashed changes
=======
                            Id = new Guid("2dbe676c-4deb-41f5-bdc1-45c47c1167ef"),
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "1bc8c3ed-07ac-4748-9cf2-4231b3a8cae2",
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                            Email = "sysadmin@domain.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@DOMAIN.COM",
                            NormalizedUserName = "SYSADMIN",
<<<<<<< HEAD
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAIAAYagAAAAEOJY4GW13Uq/ud0lDp18yJoVa4K7Lz9EjgBjG5sfElJhfz7uT15V9jKVva7ALZfkMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa6bc9ba-ddf5-4a66-94ad-bb3f496a1947",
=======
                            PasswordHash = "AQAAAAIAAYagAAAAEBeHgo6rrBVG/cE76ne8z5WM9w4Bozh3sszbQnveDZ4TxQ3G4eADYX2LNI/S6Kj89A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "464e2548-3e71-4b0c-9e33-26419cddd279",
>>>>>>> Stashed changes
=======
                            PasswordHash = "AQAAAAIAAYagAAAAENGzJHyipASbwNgzY1bjH5uV5xBMA94ECIxrBzwkPHAuy7PPtsApV9z8PKZz7BZdTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92286580-3bfb-471e-8445-cc426cb4fd63",
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                            TwoFactorEnabled = false,
                            UserName = "SysAdmin"
                        },
                        new
                        {
<<<<<<< HEAD
<<<<<<< Updated upstream
                            Id = new Guid("ed501a42-91cf-4910-929d-18f08d6a3909"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6120998-2321-45c6-854a-afef7f2ad5f9",
=======
                            Id = new Guid("5c9758d6-fb68-46f1-ba72-08ebb4017c26"),
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "6f9e05b7-288e-4237-ad40-17c10aa4a403",
>>>>>>> Stashed changes
=======
                            Id = new Guid("9a3b29f8-4f1d-41c8-973b-f3e38f8bce26"),
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "73266ad0-445a-433c-b77e-54d29b0762d7",
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                            Email = "teacher@domain.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@DOMAIN.COM",
                            NormalizedUserName = "TEACHER",
<<<<<<< HEAD
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAIAAYagAAAAEPassVwBX9WqIJT9WPcJh9EOdo0ziH48EzL6WbojeZr4R7ODhsRKkS3EPK/FCeZvNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a634bc5-460c-43ae-a627-a1d3e58a4bfc",
=======
                            PasswordHash = "AQAAAAIAAYagAAAAEKcueDzLkx9oH0SzV7mysOVnjRBkxKtAALWmbtsOSMptoR8yTzdfHjfm31E35IHJFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdc23666-38ed-4b8b-b46b-5ceb5fe7bd0b",
>>>>>>> Stashed changes
=======
                            PasswordHash = "AQAAAAIAAYagAAAAED8ywIjHxFS2xJoNBU+6jGJOCw2Ne1hIluArPKxvfRMabAnaC+Z03yiQR2jwAUQ6ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4861005-4ade-4d30-8e96-90e4208ea8fb",
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                            TwoFactorEnabled = false,
                            UserName = "Teacher"
                        },
                        new
                        {
<<<<<<< HEAD
<<<<<<< Updated upstream
                            Id = new Guid("99e8f98f-f7b7-4f6e-9d4c-01b7aabee16b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a56b01a-5a28-48a6-a79b-551623c25aa5",
=======
                            Id = new Guid("019ebbbd-aaf7-4cde-8087-c48616b430ce"),
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "0e4a2453-b30c-40fb-ad02-630ac9407650",
>>>>>>> Stashed changes
=======
                            Id = new Guid("8f5be169-bd02-4f0d-8501-5a1d5e11d97a"),
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "7cb69e03-e584-4dba-9b26-70bdfc7201b4",
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                            Email = "student@domain.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@DOMAIN.COM",
                            NormalizedUserName = "STUDENT",
<<<<<<< HEAD
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAIAAYagAAAAEDkHlFRKsQJ5uf90OmxyzE08CemQbfrVppAxEDT2yDG7jqsm3MK1j04XKL8Aj1qO4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f96b9b84-513b-4262-85f0-db694f6669fc",
=======
                            PasswordHash = "AQAAAAIAAYagAAAAEOuwqXQssKaXxd56ggYUjMed+WR9djgnfnlZDbsAOl4mSMaX0E0tya5J7SG6SSjBaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2885d85-c1bc-4bbb-a31a-2785592e82de",
>>>>>>> Stashed changes
=======
                            PasswordHash = "AQAAAAIAAYagAAAAEJb4zc7mx1rGgnTmdlPNWJMJQx444LuEniN10iIiryV/RmmNIlBedRMOJ5mjLuT36Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e21a665-484a-4eff-b585-5f7103c0615d",
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                            TwoFactorEnabled = false,
                            UserName = "Student"
                        });
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserClaims", (string)null);
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogins", (string)null);
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
<<<<<<< Updated upstream
                            UserId = new Guid("80869283-ea00-44c1-8cad-ef41850851b7"),
                            RoleId = new Guid("3a193220-b5eb-46bc-bd84-c756583c6887")
=======
                            UserId = new Guid("2dbe676c-4deb-41f5-bdc1-45c47c1167ef"),
                            RoleId = new Guid("5617a662-7420-44ab-9ff3-76bfa67b2c52")
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                        },
                        new
                        {
                            UserId = new Guid("9a3b29f8-4f1d-41c8-973b-f3e38f8bce26"),
                            RoleId = new Guid("5cde413c-fc3c-4cd5-8d97-5fee8ca28e0d")
                        },
                        new
                        {
<<<<<<< HEAD
                            UserId = new Guid("99e8f98f-f7b7-4f6e-9d4c-01b7aabee16b"),
                            RoleId = new Guid("6b0a0eb3-8514-43ff-9c2b-4b1b5b77c231")
=======
                            UserId = new Guid("391affc7-508b-4bf4-b1e5-284aba2a0a34"),
                            RoleId = new Guid("fb7dc09f-201e-45a9-b387-b8d4c0ea8407")
                        },
                        new
                        {
                            UserId = new Guid("5c9758d6-fb68-46f1-ba72-08ebb4017c26"),
                            RoleId = new Guid("d2d0e4de-17dc-49e4-b9ee-846784652a54")
                        },
                        new
                        {
                            UserId = new Guid("019ebbbd-aaf7-4cde-8087-c48616b430ce"),
                            RoleId = new Guid("9858076e-2e32-43ad-83f5-b4a692176296")
>>>>>>> Stashed changes
=======
                            UserId = new Guid("8f5be169-bd02-4f0d-8501-5a1d5e11d97a"),
                            RoleId = new Guid("c1623f62-f123-4e06-841e-87449daa44f6")
>>>>>>> 64989993402aa9d467121889e5da6b3cb58f9ffd
                        });
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserTokens", (string)null);
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.AnswerStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isCorrect")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId")
                        .IsUnique();

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("AnswerStudents");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.CourseYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Year")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseYears");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.CourseYearSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CourseYearId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseYearId");

                    b.HasIndex("SubjectId");

                    b.ToTable("CourseYearSubjects");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuizQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowAnswer")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isCorrect")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuestionAnswers");
                });

<<<<<<< Updated upstream
=======
            modelBuilder.Entity("QuizMakerDb.Data.Models.QuestionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizQuestionId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuestionItems");
                });

>>>>>>> Stashed changes
            modelBuilder.Entity("QuizMakerDb.Data.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowEmptyAnswers")
                        .HasColumnType("bit");

                    b.Property<string>("ConclusionDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte>("Minutes")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ShowResults")
                        .HasColumnType("bit");

                    b.Property<byte>("Takes")
                        .HasColumnType("tinyint");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isQuestionRandomized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<byte>("Points")
                        .HasColumnType("tinyint");

                    b.Property<byte>("QuestionType")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.QuizSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

<<<<<<< Updated upstream
=======
                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

>>>>>>> Stashed changes
                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuizId")
                        .IsUnique();

                    b.HasIndex("SectionId")
                        .IsUnique();

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("QuizSubjects");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.SchoolYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CourseYearId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseYearId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.SectionStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("SectionStudents");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

<<<<<<< Updated upstream
=======
                    b.Property<int?>("CurrentSectionId")
                        .HasColumnType("int");

>>>>>>> Stashed changes
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Sex")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("isIrregular")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Sex")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CourseYearId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseYearId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppRoleClaim", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppUserClaim", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppUserLogin", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppUserRole", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizMakerDb.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizMakerDb.Data.Identity.AppUserToken", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.AnswerStudent", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.QuizQuestion", "QuizQuestionInfo")
                        .WithOne()
                        .HasForeignKey("QuizMakerDb.Data.Models.AnswerStudent", "QuizQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMakerDb.Data.Models.Student", "StudentInfo")
                        .WithOne()
                        .HasForeignKey("QuizMakerDb.Data.Models.AnswerStudent", "StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuizQuestionInfo");

                    b.Navigation("StudentInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.CourseYear", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.Course", "CourseInfo")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.CourseYearSubject", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.CourseYear", "CourseYearInfo")
                        .WithMany()
                        .HasForeignKey("CourseYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizMakerDb.Data.Models.Subject", "SubjectInfo")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseYearInfo");

                    b.Navigation("SubjectInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.QuestionAnswer", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.QuizQuestion", "QuizQuestionInfo")
                        .WithMany()
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestionInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.QuestionItem", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.QuizQuestion", "QuizQuestionInfo")
                        .WithMany()
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestionInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.Quiz", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.Teacher", "TeacherInfo")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.QuizQuestion", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.Quiz", "QuizInfo")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.QuizSubject", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.Quiz", "QuizInfo")
                        .WithOne()
                        .HasForeignKey("QuizMakerDb.Data.Models.QuizSubject", "QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMakerDb.Data.Models.Section", "SectionInfo")
                        .WithOne()
                        .HasForeignKey("QuizMakerDb.Data.Models.QuizSubject", "SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizMakerDb.Data.Models.Section", "SubjectInfo")
                        .WithOne()
                        .HasForeignKey("QuizMakerDb.Data.Models.QuizSubject", "SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("QuizInfo");

                    b.Navigation("SectionInfo");

                    b.Navigation("SubjectInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.Section", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.CourseYear", "CourseYearInfo")
                        .WithMany()
                        .HasForeignKey("CourseYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizMakerDb.Data.Models.SchoolYear", "SchoolYearInfo")
                        .WithMany()
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseYearInfo");

                    b.Navigation("SchoolYearInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.SectionStudent", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.Section", "SectionInfo")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizMakerDb.Data.Models.Student", "StudentInfo")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionInfo");

                    b.Navigation("StudentInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.Student", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Identity.AppUser", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.Teacher", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Identity.AppUser", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("QuizMakerDb.Data.Models.TeacherSubject", b =>
                {
                    b.HasOne("QuizMakerDb.Data.Models.CourseYear", "CourseYearInfo")
                        .WithMany()
                        .HasForeignKey("CourseYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizMakerDb.Data.Models.Subject", "SubjectInfo")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizMakerDb.Data.Models.Teacher", "TeacherInfo")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseYearInfo");

                    b.Navigation("SubjectInfo");

                    b.Navigation("TeacherInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
